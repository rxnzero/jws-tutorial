package com.dhlee.jws.saaj;

import java.io.File;
import java.io.IOException;
import java.util.Iterator;

import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.Name;
import javax.xml.soap.Node;
import javax.xml.soap.SOAPBody;
import javax.xml.soap.SOAPBodyElement;
import javax.xml.soap.SOAPConstants;
import javax.xml.soap.SOAPElement;
import javax.xml.soap.SOAPEnvelope;
import javax.xml.soap.SOAPHeader;
import javax.xml.soap.SOAPMessage;
import javax.xml.soap.Text;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import com.dhlee.jws.soap.SoapMessageUtil;

public class DOMExample {
    static Document document;

    public static void main(String[] args) {
//        if (args.length != 1) {
//            System.err.println("Argument required: " + "-Dxml-file=<filename>");
//            System.exit(1);
//        }
    	
    	// change default namespace prefix
    	boolean changeSoapEnvNS = true;
    	String SOAP_1_1_DEFAULT_NS = "SOAP-ENV";
    	String SOAP_1_2_DEFAULT_NS = "env";
    	String newNsPrefix = "soapenv";
    	String SOAP_V11 = "1.1";
    	String SOAP_V12 = "1.2";
    	
    	String version = SOAP_V12;
    	
    	String filePath = "d:/slide.xml";
    			
        DOMExample de = new DOMExample();

        document = null;
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);

        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            document = builder.parse(new File(filePath));
        } catch (SAXParseException spe) {
            // Error generated by the parser
            System.out.println("\n** Parsing error" + ", line " +
                spe.getLineNumber() + ", uri " + spe.getSystemId());
            System.out.println("   " + spe.getMessage());

            // Use the contained exception, if any
            Exception x = spe;

            if (spe.getException() != null) {
                x = spe.getException();
            }

            x.printStackTrace();
        } catch (SAXException sxe) {
            // Error generated during parsing)
            Exception x = sxe;

            if (sxe.getException() != null) {
                x = sxe.getException();
            }

            x.printStackTrace();
        } catch (ParserConfigurationException pce) {
            // Parser with specified options can't be built
            pce.printStackTrace();
        } catch (IOException ioe) {
            // I/O error
            ioe.printStackTrace();
        }

        try {
            // Create SOAP 1.1 message factory
            MessageFactory messageFactory = null;
            
            if (SOAP_V11.equals(version)) {
                messageFactory = MessageFactory.newInstance();
            } else {
                messageFactory = 
                    MessageFactory.newInstance(SOAPConstants.SOAP_1_2_PROTOCOL);
            }
            // Create a message
            SOAPMessage message = messageFactory.createMessage();
            SOAPEnvelope envelope = message.getSOAPPart().getEnvelope();
            // Get the SOAP header from the message and remove it
            SOAPHeader header = message.getSOAPHeader();
            header.detachNode();
            
            // Get the SOAP body from the message
            SOAPBody body = message.getSOAPBody();

            // Add the DOM document to the message body
            SOAPBodyElement docElement = body.addDocument(document);
            
            if(changeSoapEnvNS) {
            	String defaultNsPrefix = SOAP_1_1_DEFAULT_NS;
            	if(SOAP_V11.equals(version)) {
            		defaultNsPrefix = SOAP_1_1_DEFAULT_NS;
            	}
            	else {
            		defaultNsPrefix = SOAP_1_2_DEFAULT_NS;
            	}
            	
            	Iterator nsit = envelope.getNamespacePrefixes();
            	
            	while(nsit.hasNext()) {
            		String nsPrefix = (String)nsit.next();
            		if(defaultNsPrefix.equals(nsPrefix)) {
		            	String namespaceURI = envelope.getNamespaceURI();
		                envelope.removeNamespaceDeclaration(defaultNsPrefix);
			            envelope.addNamespaceDeclaration(newNsPrefix, namespaceURI);
			            envelope.setPrefix(newNsPrefix);
			            header.setPrefix(newNsPrefix);
			            body.setPrefix(newNsPrefix);
            		}
            	}
            }
            
            message.saveChanges();

            // Get contents using SAAJ APIs
            Iterator iter1 = body.getChildElements();
            de.getContents(iter1, "");
            
            System.out.println("1. Get SOAPMessage");
            System.out.println(SoapMessageUtil.getSoap(message));
            
            System.out.println("2. Get Soap XML from SOAPMessage");
            System.out.println(SoapMessageUtil.getSoapXml(message));
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /*
     * Retrieves the contents of the elements recursively and
     * displays them.
     *
     * @param iterator      Iterator returned by getChildElements
     * @param indent        indentation to nest element display
     */
    public void getContents(Iterator iterator, String indent) {
        while (iterator.hasNext()) {
            Node node = (Node) iterator.next();
            SOAPElement element = null;
            Text text = null;

            if (node instanceof SOAPElement) {
                element = (SOAPElement) node;

                QName name = element.getElementQName();
                System.out.println(indent + "Name is " +
                    name.toString());

                // Iterator attrs = element.getAllAttributesAsQNames();
                Iterator attrs = element.getAllAttributes();

                while (attrs.hasNext()) {
                    //System.out.println("ClassCastException coming, on " +
                    //    "assignment of attribute to QName instead of Name");
                   // QName attrName = (QName) attrs.next();
                    Name attrName = (Name) attrs.next();
                    System.out.println(indent + " Attribute name is " +
                    //    attrName.toString());
                        attrName.getQualifiedName());
                    System.out.println(indent + " Attribute value is " +
                        element.getAttributeValue(attrName));
                }

                Iterator iter2 = element.getChildElements();
                getContents(iter2, indent + " ");
            } else {
                text = (Text) node;

                String content = text.getValue();
                System.out.println(indent + "Content is: " + content);
            }
        }
    }
}

